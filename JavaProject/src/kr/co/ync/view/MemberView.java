package kr.co.ync.view;import kr.co.ync.controller.MemberController;import kr.co.ync.controller.listeners.MemberEvent;import kr.co.ync.controller.listeners.MemberListener;import kr.co.ync.model.Member;import kr.co.ync.util.Util;import javax.swing.*;import javax.swing.table.DefaultTableModel;import javax.swing.table.TableCellRenderer;import javax.swing.table.TableRowSorter;import java.awt.*;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.sql.SQLException;import java.time.LocalDate;import java.time.LocalDateTime;import java.util.Arrays;import java.util.List;public class MemberView extends JFrame implements MemberListener {    public static final Dimension MINIMUM_FRAME_SIZE = new Dimension(1045, 500);    private final String[] MEMBER_FORM_LABELS = {"이메일", "이름", "전화번호", "생년월일"};    private final String[] MEMBER_TABLE_COLUMNS = {"No", "이메일", "이름", "전화번호", "생년월일", "가입일", "조회"};    private JTextField[] memberFormTextFields;    private JButton regButton;    private DefaultTableModel defaultTableModel;    private JComboBox<String> searchColumn;    public static void createAndShowGUI() {        JFrame frame = new MemberView("학번 회원관리 프로그램");        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);        frame.setMinimumSize(MINIMUM_FRAME_SIZE);        frame.setLocationRelativeTo(null);        frame.pack();        frame.setVisible(true);    }    private MemberView(String title) {        super(title);        MemberController.getInstance().addMemberListener(this);        JPanel jPanel = new JPanel(new BorderLayout());        Component leftPanel = createLeftPanel();        Component rightPanel = createRightPanel();        leftPanel.setPreferredSize(new Dimension(480, 0));        jPanel.add(leftPanel, BorderLayout.WEST);        jPanel.add(rightPanel, BorderLayout.CENTER);        add(jPanel);        registerListeners();        loadMembers();    }    private void loadMembers() {        try {            for (Member member : MemberController.getInstance().allMembers()) {                defaultTableModel.insertRow(0, member.toArray());            }        } catch (SQLException e) {            e.printStackTrace();        }    }    //  데이터 파싱    String parseData(String data, String type){        switch (type){            //  하이픈 없이 들어오면 붙여서 return            //  하이픈이 있는 경우는 그대로 return            //  생년월일과 전화번호가 들어오면 파싱해서 보냄            //  다른 값이면 패스            case "생년월일" :                if (data.matches("\\d{8}")) {                    return data.substring(0, 4) + "-" +                            data.substring(4, 6) + "-" +                            data.substring(6, 8);                }else if(data.matches("\\d{6}")) {                    //  6자리로 입력됐을때 확인하기                    //  현재 년도를 기준으로 구분 ( 1살 이하는 없을것 )                    if(Integer.parseInt(data.substring(0,2)) < LocalDate.now().getYear()-2000){                        return "20" + data.substring(0, 2) + "-" +                                data.substring(2, 4) + "-" +                                data.substring(4, 6);                    }else{                        return "19" + data.substring(0, 2) + "-" +                                data.substring(2, 4) + "-" +                                data.substring(4, 6);                    }                }else if (data.matches("\\d{4}-\\d{2}-\\d{2}")) {                    // yyyy-MM-dd 형식 그대로                    return data;                } else{                    return data;                }            case "전화번호" :                if (data.matches("\\d{11}")) {                    return data.replaceAll("(\\d{3})(\\d{4})(\\d{4})", "$1-$2-$3");                }else {                    return data;                }            default:                return data;        }    }    boolean checkBirth(LocalDate birth){        if (birth.isAfter(LocalDate.now())) {            JOptionPane.showMessageDialog(                    MemberView.this,                    "생년월일은 오늘 이전이여야 함.",                    "입력 오류",                    JOptionPane.WARNING_MESSAGE            );            return false;        }        return true;    }    //  데이터가 지정된 형식으로 들어왔는지 확인    //  지정된 형식 아니면 false , 지정된 형식이면 true 반환    boolean checkData(String email, String phone, String birth){        if (!email.matches("^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,6}$")) {            JOptionPane.showMessageDialog(                    MemberView.this,                    "이메일 형식 확인.\n예: user@example.com",                    "입력 오류",                    JOptionPane.WARNING_MESSAGE            );            return false;        }        if (!phone.matches("\\d{11}")) {            JOptionPane.showMessageDialog(                    MemberView.this,                    "전화번호 입력 확인 \n예: 01012345678",                    "입력 오류",                    JOptionPane.WARNING_MESSAGE            );            return false;        }        if (!birth.matches("\\d{8}") && !birth.matches("\\d{4}-\\d{2}-\\d{2}")) {            JOptionPane.showMessageDialog(                    MemberView.this,                    "생년월일 입력 확인.\n예: 20010101 또는 2001-01-01",                    "입력 오류",                    JOptionPane.WARNING_MESSAGE            );            return false;        }        return true;    }    private void registerListeners() {        //등록 버튼 눌렀을 때        regButton.addActionListener(new ActionListener() {            @Override            public void actionPerformed(ActionEvent e) {                //빈칸 확인                for (int i = 0; i < memberFormTextFields.length; i++) {                    if (memberFormTextFields[i].getText().trim().isEmpty()) {                        JOptionPane.showMessageDialog(                                MemberView.this,                                MEMBER_FORM_LABELS[i] + " 항목 입력 필요.",                                "입력 오류",                                JOptionPane.WARNING_MESSAGE                        );                        return;                    }                }                String email = memberFormTextFields[0].getText().trim();                String name = memberFormTextFields[1].getText().trim();                String phone = memberFormTextFields[2].getText().trim();                String birthRaw = memberFormTextFields[3].getText().trim();                //  유효한 형식으로 들어왔는지 확인                //  이멜 체크 - 이멜은 들어온 형태 그대로 전달하면 됨 (파싱 x)                //  폰번 / 생일 까지                if(!checkData(email, phone, birthRaw)) return;                //  전번 + 생일 파싱하기                phone = parseData(phone, MEMBER_FORM_LABELS[2].toString());                String parsedBirth = parseData(birthRaw, MEMBER_FORM_LABELS[3].toString());                memberFormTextFields[3].setText(parsedBirth);                //  생일에 이상한 값 들어가는지 확인하고 처리                LocalDate birthDate;                try {                    birthDate = Util.parseToLocalDate(parsedBirth);                    //  생년월일 현재보다 미래면 막기                    if (!checkBirth(birthDate)) return;                } catch (Exception ex) {                    JOptionPane.showMessageDialog(                            MemberView.this,                            "생일 형식 변환 실패.\n정확한 입력 필요.",                            "입력 오류",                            JOptionPane.WARNING_MESSAGE                    );                    return;                }                //맴버로 객체 만들고                Member member = new Member(email, name, phone, birthDate);                try {                    //중복체크                    if (MemberController.getInstance().isDuplicate(member)) {                        JOptionPane.showMessageDialog(                                MemberView.this,                                "중복되는 이메일 또는 전화번호가 있음.",                                "중복 확인",                                JOptionPane.WARNING_MESSAGE                        );                        return;                    }                    //  flush                    MemberController.getInstance().save(member);                } catch (SQLException ex) {                    JOptionPane.showMessageDialog(                            MemberView.this,                            "오류:\n" + ex.getMessage(),                            "에러",                            JOptionPane.ERROR_MESSAGE                    );                }            }        });    }    private Component createLeftPanel() {        JPanel jPanel = new JPanel();        jPanel.setLayout(null);        memberFormTextFields = new JTextField[MEMBER_FORM_LABELS.length];        JPanel fieldPanel = new JPanel();        fieldPanel.setBounds(15, 5, 450, 180);        fieldPanel.setLayout(new GridLayout(4, 2, 5, 5));        fieldPanel.setBorder(                BorderFactory.createCompoundBorder(                        BorderFactory.createTitledBorder("회원등록"),                        BorderFactory.createEmptyBorder(5, 5, 5, 0)                )        );        for (int i = 0; i < memberFormTextFields.length; i++) {            memberFormTextFields[i] = new JTextField();            JLabel jLabel;            if (MEMBER_FORM_LABELS[i].equals("전화번호")) {                jLabel = new JLabel("전화번호 ('-' 없이 입력)", SwingConstants.LEFT);            } else if (MEMBER_FORM_LABELS[i].equals("생년월일")) {                jLabel = new JLabel("생년월일", SwingConstants.LEFT);            } else {                jLabel = new JLabel(MEMBER_FORM_LABELS[i], SwingConstants.LEFT);            }            fieldPanel.add(jLabel);            fieldPanel.add(memberFormTextFields[i]);        }        regButton = new JButton("등록");        regButton.setBounds(15, 186, 450, 40);        jPanel.add(fieldPanel);        jPanel.add(regButton);        return jPanel;    }    private Component createRightPanel() {        JPanel jPanel = new JPanel(new BorderLayout());        jPanel.setBorder(                BorderFactory.createCompoundBorder(                        BorderFactory.createTitledBorder("회원목록"),                        BorderFactory.createEmptyBorder(5, 5, 5, 5)                )        );        //  검색 패널 만들기        JPanel searchPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));        JTextField searchField = new JTextField(15);        JButton searchButton = new JButton("검색");        JButton resetButton = new JButton("전체 보기");        //  검색 조건(컬럼) 만들고 콤보박스로 넣기        String[] columnOptions = {"이메일", "이름", "전화번호", "생년월일"};        searchColumn = new JComboBox<>(columnOptions);        //검색 패널에 올릴 요소들        searchPanel.add(new JLabel("검색 기준:"));        searchPanel.add(searchColumn);        searchPanel.add(searchField);        searchPanel.add(searchButton);        searchPanel.add(resetButton);        //  테이블 만들기        defaultTableModel = new DefaultTableModel(MEMBER_TABLE_COLUMNS, 0) {            @Override            public boolean isCellEditable(int row, int column) {                // 조회 버튼만 클릭가능하게 만들기                return column == MEMBER_TABLE_COLUMNS.length - 1;            }        };        JTable jTable = new JTable(defaultTableModel);        jTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);        jTable.setFillsViewportHeight(true);        //  테이블 정렬 기능        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(defaultTableModel);        jTable.setRowSorter(sorter);        //  조회는 제외하기        sorter.setSortable(MEMBER_TABLE_COLUMNS.length - 1, false);        //  정렬 버튼 만들기        jTable.getColumn("조회").setCellRenderer(new ButtonRenderer());        jTable.getColumn("조회").setCellEditor(new ButtonEditor(new JCheckBox()));        //  테이블 row 끝에 조회 버튼 만들기        jTable.getColumn("조회").setCellRenderer(new ButtonRenderer());        jTable.getColumn("조회").setCellEditor(new ButtonEditor(new JCheckBox()));        JScrollPane jScrollPane = new JScrollPane();        jScrollPane.setViewportView(jTable);        jScrollPane.setBorder(BorderFactory.createEmptyBorder(10, 5, 10, 10));        //  위에 검색 아래쪽에 테이블        jPanel.add(searchPanel, BorderLayout.NORTH);        jPanel.add(jScrollPane, BorderLayout.CENTER);        //  검색창에서 엔터 눌렀을때 동작하도록 만들기        searchField.addActionListener(e -> {            String findingStr = searchField.getText().trim();            //  빈칸 확인            if (findingStr.isEmpty()) {                JOptionPane.showMessageDialog(this, "검색어를 입력하세요.", "알림", JOptionPane.INFORMATION_MESSAGE);                return;            }            String selectedColumn = (String) searchColumn.getSelectedItem();            filterTableBySelected(findingStr, selectedColumn);        });        //검색 누르면 동작하기        searchButton.addActionListener(e -> {            String findingStr = searchField.getText().trim();            //  빈칸 확인            if (findingStr.isEmpty()) {                JOptionPane.showMessageDialog(this, "검색어를 입력하세요.", "알림", JOptionPane.INFORMATION_MESSAGE);                return;            }            String selectedColumn = (String) searchColumn.getSelectedItem();            filterTableBySelected(findingStr, selectedColumn);        });        //  reset 버튼 누르면 다시 테이블 출력하도록        resetButton.addActionListener(e -> {            updateTableWithAllMembers();            searchField.setText("");        });        return jPanel;    }    private void updateTable(List<Member> members) {        // 기존 데이터 제거        defaultTableModel.setRowCount(0);        for (Member member : members) {            defaultTableModel.addRow(member.toArray());        }    }    private void filterTableBySelected(String findingStr, String columnName) {        try {            // 전체 데이터 가져와 초기화            List<Member> allMembers = MemberController.getInstance().allMembers();            defaultTableModel.setRowCount(0);            //  데이터 파싱하기 ( 생일, 전번 하이픈 유무 상관x, 생일 6자리까지)            findingStr = parseData(findingStr, columnName);            //  값찾기            for (Member member : allMembers) {                Object[] rowData = member.toArray();                int columnIndex = Arrays.asList(MEMBER_TABLE_COLUMNS).indexOf(columnName);                if (columnIndex >= 0) {                    String target = rowData[columnIndex].toString();                    if (target.contains(findingStr)) {                        defaultTableModel.addRow(rowData);                    }                }            }        } catch (SQLException e) {            JOptionPane.showMessageDialog(                    this,                    "검색 중 오류 발생:\n" + e.getMessage(),                    "오류",                    JOptionPane.ERROR_MESSAGE            );        }    }    private void updateTableWithAllMembers() {        try {            List<Member> allMembers = MemberController.getInstance().allMembers();            updateTable(allMembers);        } catch (SQLException e) {            e.printStackTrace();        }    }    @Override    public void register(MemberEvent memberEvent) {        Member member = (Member) memberEvent.getSource();        defaultTableModel.insertRow(0, member.toArray());        clearMemberFormTextFields();    }    private void clearMemberFormTextFields() {        Arrays.stream(memberFormTextFields).forEach(field -> field.setText(""));    }    // 조회 버튼 찍기    class ButtonRenderer extends JButton implements TableCellRenderer {        public ButtonRenderer() {            setText("조회");        }        @Override        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {            // 버튼 리턴해서 보이게 해 줘야됨            return this;        }    }    // 조회 버튼 클릭 -> 상세정보 팝업    class ButtonEditor extends DefaultCellEditor {        private JButton button;        private Member currentMember;        public ButtonEditor(JCheckBox checkBox) {            super(checkBox);            button = new JButton("조회");            button.setOpaque(true);            button.addActionListener(e -> showMemberDetail(currentMember));        }        @Override        public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {            String id = (String) table.getValueAt(row, 0);            String email = (String) table.getValueAt(row, 1);            String name = (String) table.getValueAt(row, 2);            String phone = (String) table.getValueAt(row, 3);            String birth = (String) table.getValueAt(row, 4);            String regDate = (String) table.getValueAt(row, 5);            currentMember = new Member(                    Long.parseLong(id),                    email,                    name,                    phone,                    LocalDate.parse(birth),                    LocalDateTime.parse(regDate)            );            return button;        }        //  조회 탭 만들기        private void showMemberDetail(Member member) {            //  조회 탭            JDialog dialog = new JDialog();            dialog.setTitle("회원 정보 조회");            dialog.setModal(true);            dialog.setSize(400, 300);            dialog.setLocationRelativeTo(null);            dialog.setLayout(new BorderLayout());            //멤버 정보 출력            JPanel infoPanel = new JPanel(new GridLayout(6, 1, 5, 5));            infoPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));            infoPanel.add(new JLabel("이메일: " + member.getEmail()));            infoPanel.add(new JLabel("이름: " + member.getName()));            infoPanel.add(new JLabel("전화번호: " + member.getPhone()));            infoPanel.add(new JLabel("생년월일: " + member.getBirth()));            infoPanel.add(new JLabel("가입일: " + member.getRegDate()));            //수정삭제 / 닫기 버튼 올릴 아래쪽 버튼            JPanel btmPanel = new JPanel(new BorderLayout());            //왼쪽패널 만들기 - 수정,삭제            JPanel leftPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));            JButton updateBtn = new JButton("수정");            JButton deleteBtn = new JButton("삭제");            leftPanel.add(updateBtn);            leftPanel.add(deleteBtn);            //닫기 만들기 - 오른쪽            JPanel rightPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));            JButton closeBtn = new JButton("닫기");            closeBtn.addActionListener(e -> dialog.dispose());            rightPanel.add(closeBtn);            //아래쪽 패널에 왼쪽오른쪽에 배치            btmPanel.add(leftPanel, BorderLayout.WEST);            btmPanel.add(rightPanel, BorderLayout.EAST);            //패널 올려버리기            dialog.add(infoPanel, BorderLayout.CENTER);            dialog.add(btmPanel, BorderLayout.SOUTH);            // 삭제 버튼 동작            deleteBtn.addActionListener(e -> {                int confirm = JOptionPane.showConfirmDialog(                        dialog,                        "삭제 하십니까?",                        "회원 삭제",                        JOptionPane.YES_NO_OPTION                );                if (confirm == JOptionPane.YES_OPTION) {                    //DB 에서 삭제                    MemberController.getInstance().delete(member);                    // 테이블(패널)에서 제거된 컬럼 열 제거                    for (int i = 0; i < defaultTableModel.getRowCount(); i++) {                        if (defaultTableModel.getValueAt(i, 0).toString().equals(String.valueOf(member.getId()))) {                            defaultTableModel.removeRow(i);                            break;                        }                    }                    dialog.dispose();                }            });            // 수정 버튼 동작 - 누르면 수정하는 팝업 나옴            updateBtn.addActionListener(e -> {                //  조회 탭 닫아서 수정탭에서 조작 가능하도록 끔                dialog.dispose();                showEditWindow(member);            });            dialog.setVisible(true);        }        // 수정 탭 만들기        private void showEditWindow(Member member) {            //  수정 탭            JDialog editDialog = new JDialog();            editDialog.setTitle("회원 정보 수정");            editDialog.setSize(400, 350);            editDialog.setLocationRelativeTo(null);            editDialog.setLayout(new BorderLayout());            //입력패널            JPanel editPanel = new JPanel(new GridLayout(4, 2, 5, 5));            editPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));            //  입력패널에 원래 있던 값 기본으로 넣어줌            JTextField emailField = new JTextField(member.getEmail());            JTextField nameField = new JTextField(member.getName());            JTextField phoneField = new JTextField(member.getPhone().replaceAll("-", ""));            JTextField birthField = new JTextField(member.getBirth().toString().replace("-", "")); // yyyyMMdd            //  왼쪽 패널            editPanel.add(new JLabel("이메일:"));            editPanel.add(emailField);            editPanel.add(new JLabel("이름:"));            editPanel.add(nameField);            editPanel.add(new JLabel("전화번호 (11자리):"));            editPanel.add(phoneField);            editPanel.add(new JLabel("생년월일 (8자리):"));            editPanel.add(birthField);            //  아래쪽 버튼 패널 + 버튼 만들기            JPanel btnPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));            JButton saveBtn = new JButton("저장");            JButton cancelBtn = new JButton("취소");            btnPanel.add(saveBtn);            btnPanel.add(cancelBtn);            //  바로그냥합치기            editDialog.add(editPanel, BorderLayout.CENTER);            editDialog.add(btnPanel, BorderLayout.SOUTH);            //  취소버튼 누르면 꺼짐            cancelBtn.addActionListener(e -> editDialog.dispose());            //  버튼 동작 - 수정            saveBtn.addActionListener(e -> {                //값 받아오기                String email = emailField.getText().trim();                String name = nameField.getText().trim();                String phone = phoneField.getText().trim();                String birthRaw = birthField.getText().trim();                //  유효성 검사하기                if (!checkData(email, phone, birthRaw)) return;                //  파싱                String parsedPhone = parseData(phone, MEMBER_FORM_LABELS[2].toString());                String parsedBirth = parseData(birthRaw, MEMBER_FORM_LABELS[3].toString());                try {                    LocalDate birthDate = Util.parseToLocalDate(parsedBirth);                    //  생일 날짜 확인                    if (!checkBirth(birthDate)) return;                    // 수정된 Member 만들기                    Member updatedMember = new Member(member.getId(), email, name, phone, birthDate, member.getRegDate());                    // 컨트롤러로 업데이트 요청                    MemberController.getInstance().update(updatedMember);                    // 테이블 update                    for (int i = 0; i < defaultTableModel.getRowCount(); i++) {                        if (defaultTableModel.getValueAt(i, 0).toString().equals(String.valueOf(member.getId()))) {                            defaultTableModel.setValueAt(email, i, 1);                            defaultTableModel.setValueAt(name, i, 2);                            defaultTableModel.setValueAt(parsedPhone, i, 3);                            defaultTableModel.setValueAt(parsedBirth, i, 4);                            break;                        }                    }                    //  수정 완료했다고 팝업 띄우고                    //  수정 탭 종료                    JOptionPane.showMessageDialog(editDialog, "수정 완료.");                    editDialog.dispose();                } catch (Exception ex) {                    JOptionPane.showMessageDialog(editDialog, "입력 오류: " + ex.getMessage());                }            });            editDialog.setVisible(true);        }    }}